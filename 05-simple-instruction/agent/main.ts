#!/usr/bin/env node

import { readFileSync, writeFileSync, existsSync, mkdirSync } from 'fs';
import { join } from 'path';

/**
 * Simple Instruction Agent
 * Reads instructions.md and performs requested actions
 */
class SimpleInstructionAgent {
  
  async processInstructions(): Promise<void> {
    console.log('🤖 Simple Instruction Agent: Reading instructions.md...');
    
    try {
      // Read instructions file
      if (!existsSync('instructions.md')) {
        console.log('❌ No instructions.md file found');
        return;
      }
      
      const instructions = readFileSync('instructions.md', 'utf8');
      console.log('📄 Found instructions.md');
      
      // Check for smoke test request
      if (this.shouldCreateSmokeTests(instructions)) {
        console.log('🔍 Detected request for smoke tests');
        await this.createSmokeTests();
      } else {
        console.log('ℹ️  No actionable instructions found (looking for "smoke tests")');
      }
      
      console.log('\n✅ Instruction processing complete!');
      console.log('💡 Run `npm test` to execute any generated tests');
      
    } catch (error: any) {
      console.error('❌ Error processing instructions:', error.message);
    }
  }
  
  /**
   * Check if instructions contain request for smoke tests
   */
  private shouldCreateSmokeTests(instructions: string): boolean {
    const smokeTestPatterns = [
      /smoke\s+tests?/i,
      /create.*smoke/i,
      /generate.*smoke/i,
      /add.*smoke/i
    ];
    
    return smokeTestPatterns.some(pattern => pattern.test(instructions));
  }
  
  /**
   * Create smoke tests for the source code
   */
  private async createSmokeTests(): Promise<void> {
    // Ensure tests directory exists
    if (!existsSync('tests')) {
      mkdirSync('tests');
      console.log('📁 Created tests/ directory');
    }
    
    // Read source code to understand what to test
    const sourceCode = this.readSourceCode();
    const functions = this.extractFunctions(sourceCode);
    
    console.log(`🔍 Found ${functions.length} functions to test: ${functions.join(', ')}`);
    
    // Generate smoke test content
    const testContent = this.generateSmokeTestContent(functions);
    
    // Write the test file
    const testFile = 'tests/smoke.auto.test.ts';
    writeFileSync(testFile, testContent);
    console.log(`✅ Generated ${testFile}`);
  }
  
  /**
   * Read and return source code
   */
  private readSourceCode(): string {
    try {
      return readFileSync('src/index.ts', 'utf8');
    } catch (error) {
      console.log('⚠️  Could not read src/index.ts, creating basic smoke test');
      return '';
    }
  }
  
  /**
   * Extract function names from source code
   */
  private extractFunctions(sourceCode: string): string[] {
    const functions: string[] = [];
    const functionRegex = /export\s+function\s+(\w+)/g;
    let match;
    
    while ((match = functionRegex.exec(sourceCode)) !== null) {
      functions.push(match[1]);
    }
    
    return functions;
  }
  
  /**
   * Generate smoke test content
   */
  private generateSmokeTestContent(functions: string[]): string {
    const timestamp = new Date().toISOString();
    
    let content = `// Generated by Simple Instruction Agent 🤖
// Created: ${timestamp}
// Agent: agent/main.ts

import { describe, it, expect } from "vitest";

`;
    
    if (functions.length > 0) {
      content += `import { ${functions.join(', ')} } from "../src/index.js";

describe("Smoke Tests", () => {
  it("should load the module without errors", () => {
    expect(true).toBe(true);
  });

`;
      
      // Add basic smoke tests for each function
      functions.forEach(funcName => {
        content += `  it("should have ${funcName} function", () => {
    expect(typeof ${funcName}).toBe('function');
  });

`;
        
        // Add specific tests for known functions
        if (funcName === 'greet') {
          content += `  it("greet should return hello message", () => {
    expect(greet("world")).toBe("hello, world");
  });

`;
        }
        
        if (funcName === 'add' || funcName === 'sum') {
          content += `  it("${funcName} should add numbers", () => {
    expect(${funcName}(2, 3)).toBe(5);
  });

`;
        }
        
        if (funcName === 'multiply') {
          content += `  it("multiply should multiply numbers", () => {
    expect(multiply(3, 4)).toBe(12);
  });

`;
        }
      });
      
      content += `});
`;
    } else {
      content += `describe("Basic Smoke Test", () => {
  it("should pass basic smoke test", () => {
    expect(true).toBe(true);
  });
});
`;
    }
    
    return content;
  }
}

// Run the agent
async function main() {
  console.log('🚀 Starting Simple Instruction Agent...\n');
  
  const agent = new SimpleInstructionAgent();
  await agent.processInstructions();
}

// Execute the agent
main().catch((error) => {
  console.error('💥 Agent failed:', error.message);
  process.exit(1);
});

export { SimpleInstructionAgent };