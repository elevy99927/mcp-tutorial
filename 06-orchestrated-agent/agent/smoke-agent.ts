import { readFileSync, writeFileSync, existsSync, mkdirSync, readdirSync } from 'fs';
import { join } from 'path';

/**
 * Smoke Test Agent
 * Specialized agent for generating comprehensive smoke tests
 */
export class SmokeAgent {
  
  async generateSmokeTests(): Promise<void> {
    console.log('  üî• Smoke-Test Agent: Analyzing source code...');
    
    try {
      // Ensure tests directory exists
      if (!existsSync('tests')) {
        mkdirSync('tests');
        console.log('  üìÅ Created tests/ directory');
      }
      
      // Scan all TypeScript files in src/
      const sourceFiles = this.scanSourceFiles();
      console.log(`  üîç Found ${sourceFiles.length} source files: ${sourceFiles.join(', ')}`);
      
      // Extract all functions from all files
      const allFunctions = this.extractAllFunctions(sourceFiles);
      console.log(`  üéØ Found ${allFunctions.length} functions to test`);
      
      // Generate comprehensive smoke test
      const testContent = this.generateSmokeTestContent(sourceFiles, allFunctions);
      
      // Write the test file
      const testFile = 'tests/smoke.auto.test.ts';
      writeFileSync(testFile, testContent);
      console.log(`  ‚úÖ Generated ${testFile}`);
      
    } catch (error: any) {
      console.error('  ‚ùå Smoke-Test Agent error:', error.message);
    }
  }
  
  /**
   * Scan src/ directory for TypeScript files
   */
  private scanSourceFiles(): string[] {
    try {
      const files = readdirSync('src')
        .filter(file => file.endsWith('.ts'))
        .map(file => file.replace('.ts', ''));
      return files;
    } catch (error) {
      console.log('  ‚ö†Ô∏è  Could not scan src/ directory');
      return [];
    }
  }
  
  /**
   * Extract functions from all source files
   */
  private extractAllFunctions(sourceFiles: string[]): Array<{file: string, functions: string[]}> {
    const result: Array<{file: string, functions: string[]}> = [];
    
    for (const file of sourceFiles) {
      try {
        const sourceCode = readFileSync(`src/${file}.ts`, 'utf8');
        const functions = this.extractFunctions(sourceCode);
        if (functions.length > 0) {
          result.push({ file, functions });
        }
      } catch (error) {
        console.log(`  ‚ö†Ô∏è  Could not read src/${file}.ts`);
      }
    }
    
    return result;
  }
  
  /**
   * Extract function names from source code
   */
  private extractFunctions(sourceCode: string): string[] {
    const functions: string[] = [];
    const functionRegex = /export\s+function\s+(\w+)/g;
    let match;
    
    while ((match = functionRegex.exec(sourceCode)) !== null) {
      functions.push(match[1]);
    }
    
    return functions;
  }
  
  /**
   * Generate comprehensive smoke test content
   */
  private generateSmokeTestContent(sourceFiles: string[], allFunctions: Array<{file: string, functions: string[]}>): string {
    const timestamp = new Date().toISOString();
    
    let content = `// Generated by Smoke-Test Agent üî•
// Created: ${timestamp}
// Agent: agent/smoke-agent.ts
// Orchestrated by: agent/orchestrator.ts

import { describe, it, expect } from "vitest";

`;
    
    // Import all functions from all files
    for (const { file, functions } of allFunctions) {
      if (functions.length > 0) {
        content += `import { ${functions.join(', ')} } from "../src/${file}.js";\n`;
      }
    }
    
    content += `\ndescribe("Smoke Tests - Module Loading", () => {
  it("should load all modules without errors", () => {
    expect(true).toBe(true);
  });
});

`;
    
    // Generate tests for each file
    for (const { file, functions } of allFunctions) {
      content += `describe("Smoke Tests - ${file}.ts", () => {\n`;
      
      // Test each function
      for (const funcName of functions) {
        content += `  it("should have ${funcName} function", () => {
    expect(typeof ${funcName}).toBe('function');
  });

`;
        
        // Add specific functional tests
        if (funcName === 'greet') {
          content += `  it("greet should return hello message", () => {
    expect(greet("world")).toBe("hello, world");
  });

`;
        }
        
        if (['add', 'sum'].includes(funcName)) {
          content += `  it("${funcName} should add numbers", () => {
    expect(${funcName}(2, 3)).toBe(5);
  });

`;
        }
        
        if (funcName === 'multiply') {
          content += `  it("multiply should multiply numbers", () => {
    expect(multiply(3, 4)).toBe(12);
  });

`;
        }
        
        if (funcName === 'subtract') {
          content += `  it("subtract should subtract numbers", () => {
    expect(subtract(5, 3)).toBe(2);
  });

`;
        }
        
        if (funcName === 'divide') {
          content += `  it("divide should divide numbers", () => {
    expect(divide(10, 2)).toBe(5);
  });

  it("divide should throw on division by zero", () => {
    expect(() => divide(10, 0)).toThrow('Division by zero');
  });

`;
        }
      }
      
      content += `});

`;
    }
    
    return content;
  }
}