import { readFileSync, writeFileSync, readdirSync, existsSync, mkdirSync } from 'fs';

/**
 * Mermaid Agent
 * Specialized agent for generating Mermaid flow diagrams
 */
export class MermaidAgent {
  
  async generateMermaidDiagram(): Promise<void> {
    console.log('  üìä Mermaid Agent: Analyzing project structure...');
    
    try {
      // Scan source files
      const sourceFiles = this.scanSourceFiles();
      console.log(`  üîç Found ${sourceFiles.length} source files: ${sourceFiles.join(', ')}`);
      
      // Extract module information
      const modules = this.extractModuleInfo(sourceFiles);
      console.log(`  üéØ Analyzed ${modules.length} modules`);
      
      // Generate Mermaid diagram
      const diagramContent = this.generateMermaidContent(modules);
      
      // Ensure mermaid directory exists
      if (!existsSync('mermaid')) {
        mkdirSync('mermaid');
        console.log('  üìÅ Created mermaid/ directory');
      }
      
      // Write the diagram file
      const diagramFile = 'mermaid/mermaid.md';
      writeFileSync(diagramFile, diagramContent);
      console.log(`  ‚úÖ Generated ${diagramFile}`);
      
    } catch (error: any) {
      console.error('  ‚ùå Mermaid Agent error:', error.message);
    }
  }
  
  /**
   * Scan src/ directory for TypeScript files
   */
  private scanSourceFiles(): string[] {
    try {
      const files = readdirSync('src')
        .filter(file => file.endsWith('.ts'))
        .map(file => file.replace('.ts', ''));
      return files;
    } catch (error) {
      console.log('  ‚ö†Ô∏è  Could not scan src/ directory');
      return [];
    }
  }
  
  /**
   * Extract module information including functions and imports
   */
  private extractModuleInfo(sourceFiles: string[]): Array<{
    name: string,
    functions: string[],
    imports: string[]
  }> {
    const modules: Array<{name: string, functions: string[], imports: string[]}> = [];
    
    for (const file of sourceFiles) {
      try {
        const sourceCode = readFileSync(`src/${file}.ts`, 'utf8');
        const functions = this.extractFunctions(sourceCode);
        const imports = this.extractImports(sourceCode);
        
        modules.push({
          name: file,
          functions,
          imports
        });
      } catch (error) {
        console.log(`  ‚ö†Ô∏è  Could not read src/${file}.ts`);
      }
    }
    
    return modules;
  }
  
  /**
   * Extract function names from source code
   */
  private extractFunctions(sourceCode: string): string[] {
    const functions: string[] = [];
    const functionRegex = /export\s+function\s+(\w+)/g;
    let match;
    
    while ((match = functionRegex.exec(sourceCode)) !== null) {
      functions.push(match[1]);
    }
    
    return functions;
  }
  
  /**
   * Extract import statements from source code
   */
  private extractImports(sourceCode: string): string[] {
    const imports: string[] = [];
    const importRegex = /import\s+.*from\s+['"]\.\/(\w+)(?:\.js)?['"]/g;
    let match;
    
    while ((match = importRegex.exec(sourceCode)) !== null) {
      imports.push(match[1]);
    }
    
    return imports;
  }
  
  /**
   * Generate Mermaid diagram content
   */
  private generateMermaidContent(modules: Array<{name: string, functions: string[], imports: string[]}>): string {
    const timestamp = new Date().toISOString();
    
    let content = `# Project Flow Diagram

Generated by Mermaid Agent üìä  
Created: ${timestamp}  
Agent: agent/mermaid-agent.ts  
Orchestrated by: agent/orchestrator.ts

## Architecture Overview

\`\`\`mermaid
graph TD
    %% Project modules and their relationships
    
`;
    
    // Add module nodes
    for (const module of modules) {
      const moduleId = module.name.toUpperCase();
      content += `    ${moduleId}[${module.name}.ts]\n`;
      
      // Add function nodes for each module
      for (const func of module.functions) {
        const funcId = `${moduleId}_${func.toUpperCase()}`;
        content += `    ${funcId}["${func}()"]\n`;
        content += `    ${moduleId} --> ${funcId}\n`;
      }
    }
    
    content += `\n    %% Module dependencies\n`;
    
    // Add import relationships
    for (const module of modules) {
      const moduleId = module.name.toUpperCase();
      for (const importedModule of module.imports) {
        const importId = importedModule.toUpperCase();
        content += `    ${importId} --> ${moduleId}\n`;
      }
    }
    
    content += `
    %% Styling
    classDef moduleClass fill:#e1f5fe,stroke:#01579b,stroke-width:2px
    classDef functionClass fill:#f3e5f5,stroke:#4a148c,stroke-width:1px
    
`;
    
    // Apply styles
    for (const module of modules) {
      const moduleId = module.name.toUpperCase();
      content += `    class ${moduleId} moduleClass\n`;
      
      for (const func of module.functions) {
        const funcId = `${moduleId}_${func.toUpperCase()}`;
        content += `    class ${funcId} functionClass\n`;
      }
    }
    
    content += `\`\`\`

## Module Details

`;
    
    // Add module details
    for (const module of modules) {
      content += `### ${module.name}.ts

**Exported Functions:**
${module.functions.map(f => `- \`${f}()\``).join('\n')}

`;
      
      if (module.imports.length > 0) {
        content += `**Dependencies:**
${module.imports.map(i => `- \`${i}.ts\``).join('\n')}

`;
      }
    }
    
    content += `## How to View

1. Copy the Mermaid code above
2. Paste it into [Mermaid Live Editor](https://mermaid.live/)
3. Or use any Mermaid-compatible viewer

## Legend

- üü¶ **Blue boxes**: TypeScript modules (.ts files)
- üü™ **Purple boxes**: Exported functions
- ‚û°Ô∏è **Arrows**: Dependencies and relationships
`;
    
    return content;
  }
}