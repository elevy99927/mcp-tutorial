import { readFileSync, writeFileSync, existsSync, mkdirSync, readdirSync } from 'fs';
import { join } from 'path';

/**
 * Smoke Test Agent
 * Specialized agent for generating comprehensive smoke tests
 */
export class SmokeAgent {
  
  async generateSmokeTests(): Promise<void> {
    console.log('  Smoke-Test Agent: Analyzing source code...');
    
    try {
      // Ensure outputs/tests directory exists
      if (!existsSync('outputs')) {
        mkdirSync('outputs');
        console.log('  üìÅ Created outputs/ directory');
      }
      if (!existsSync('outputs/tests')) {
        mkdirSync('outputs/tests');
        console.log('  üìÅ Created outputs/tests/ directory');
      }
      
      // Scan all TypeScript files in src/
      const sourceFiles = this.scanSourceFiles();
      console.log(`  üîç Found ${sourceFiles.length} source files: ${sourceFiles.join(', ')}`);
      
      // Extract all functions from all files
      const allFunctions = this.extractAllFunctions(sourceFiles);
      console.log(`  üéØ Found ${allFunctions.length} functions to test`);
      
      // Generate comprehensive smoke test
      const testContent = this.generateSmokeTestContent(sourceFiles, allFunctions);
      
      // Write the test file
      const testFile = 'outputs/tests/smoke.auto.test.ts';
      writeFileSync(testFile, testContent);
      console.log(`  ‚úÖ Generated ${testFile}`);
      
      // Generate HTML test report
      const htmlReport = this.generateHtmlReport(allFunctions);
      const reportFile = 'outputs/tests/test-report.html';
      writeFileSync(reportFile, htmlReport);
      console.log(`  ‚úÖ Generated ${reportFile}`);
      
    } catch (error: any) {
      console.error('  ‚ùå Smoke-Test Agent error:', error.message);
    }
  }
  
  /**
   * Scan src/ directory for TypeScript files
   */
  private scanSourceFiles(): string[] {
    try {
      const files = readdirSync('src')
        .filter(file => file.endsWith('.ts'))
        .map(file => file.replace('.ts', ''));
      return files;
    } catch (error) {
      console.log('  ‚ö†Ô∏è  Could not scan src/ directory');
      return [];
    }
  }
  
  /**
   * Extract functions from all source files
   */
  private extractAllFunctions(sourceFiles: string[]): Array<{file: string, functions: string[]}> {
    const result: Array<{file: string, functions: string[]}> = [];
    
    for (const file of sourceFiles) {
      try {
        const sourceCode = readFileSync(`src/${file}.ts`, 'utf8');
        const functions = this.extractFunctions(sourceCode);
        if (functions.length > 0) {
          result.push({ file, functions });
        }
      } catch (error) {
        console.log(`  ‚ö†Ô∏è  Could not read src/${file}.ts`);
      }
    }
    
    return result;
  }
  
  /**
   * Extract function names from source code
   */
  private extractFunctions(sourceCode: string): string[] {
    const functions: string[] = [];
    const functionRegex = /export\s+function\s+(\w+)/g;
    let match;
    
    while ((match = functionRegex.exec(sourceCode)) !== null) {
      functions.push(match[1]);
    }
    
    return functions;
  }
  
  /**
   * Generate comprehensive smoke test content
   */
  private generateSmokeTestContent(sourceFiles: string[], allFunctions: Array<{file: string, functions: string[]}>): string {
    const timestamp = new Date().toISOString();
    
    let content = `// Generated by Smoke-Test Agent 
// Created: ${timestamp}
// Agent: agent/smoke-agent.ts
// Orchestrated by: agent/orchestrator.ts

import { describe, it, expect } from "vitest";

`;
    
    // Import all functions from all files
    for (const { file, functions } of allFunctions) {
      if (functions.length > 0) {
        content += `import { ${functions.join(', ')} } from "../../src/${file}.js";\n`;
      }
    }
    
    content += `\ndescribe("Smoke Tests - Module Loading", () => {
  it("should load all modules without errors", () => {
    expect(true).toBe(true);
  });
});

`;
    
    // Generate tests for each file
    for (const { file, functions } of allFunctions) {
      content += `describe("Smoke Tests - ${file}.ts", () => {\n`;
      
      // Test each function
      for (const funcName of functions) {
        content += `  it("should have ${funcName} function", () => {
    expect(typeof ${funcName}).toBe('function');
  });

`;
        
        // Add specific functional tests
        if (funcName === 'greet') {
          content += `  it("greet should return hello message", () => {
    expect(greet("world")).toBe("hello, world");
  });

`;
        }
        
        if (['add', 'sum'].includes(funcName)) {
          content += `  it("${funcName} should add numbers", () => {
    expect(${funcName}(2, 3)).toBe(5);
  });

`;
        }
        
        if (funcName === 'multiply') {
          content += `  it("multiply should multiply numbers", () => {
    expect(multiply(3, 4)).toBe(12);
  });

`;
        }
        
        if (funcName === 'subtract') {
          content += `  it("subtract should subtract numbers", () => {
    expect(subtract(5, 3)).toBe(2);
  });

`;
        }
        
        if (funcName === 'divide') {
          content += `  it("divide should divide numbers", () => {
    expect(divide(10, 2)).toBe(5);
  });

  it("divide should throw on division by zero", () => {
    expect(() => divide(10, 0)).toThrow('Division by zero');
  });

`;
        }
      }
      
      content += `});

`;
    }
    
    return content;
  }
  
  /**
   * Generate HTML test report
   */
  private generateHtmlReport(allFunctions: Array<{file: string, functions: string[]}>): string {
    const timestamp = new Date().toISOString();
    const totalFunctions = allFunctions.reduce((sum, module) => sum + module.functions.length, 0);
    
    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Smoke Test Report</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 1000px;
            margin: 20px auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
        }
        .header-info {
            background-color: #e3f2fd;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        .summary {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 30px;
        }
        .summary-card {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            text-align: center;
            border-left: 4px solid #28a745;
        }
        .summary-card h3 {
            margin: 0 0 10px 0;
            color: #333;
        }
        .summary-card .number {
            font-size: 24px;
            font-weight: bold;
            color: #28a745;
        }
        .module {
            margin-bottom: 30px;
            border: 1px solid #dee2e6;
            border-radius: 5px;
            overflow: hidden;
        }
        .module-header {
            background-color: #007bff;
            color: white;
            padding: 15px;
            font-weight: bold;
        }
        .function-list {
            padding: 0;
            margin: 0;
            list-style: none;
        }
        .function-item {
            padding: 10px 15px;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .function-item:last-child {
            border-bottom: none;
        }
        .function-name {
            font-family: 'Courier New', monospace;
            font-weight: bold;
        }
        .test-status {
            padding: 4px 8px;
            border-radius: 3px;
            font-size: 12px;
            font-weight: bold;
        }
        .status-generated {
            background-color: #d4edda;
            color: #155724;
        }
        .footer {
            margin-top: 30px;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 5px;
            text-align: center;
            color: #6c757d;
        }
        .github-link {
            margin-top: 15px;
            text-align: center;
        }
        .github-link a {
            color: #0366d6;
            text-decoration: none;
        }
        .github-link a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Smoke Test Report</h1>
        
        <div class="header-info">
            <strong>Generated by:</strong> Smoke-Test Agent<br>
            <strong>Timestamp:</strong> ${timestamp}<br>
            <strong>Agent:</strong> agent/smoke-agent.ts
        </div>
        
        <div class="summary">
            <div class="summary-card">
                <h3>Total Modules</h3>
                <div class="number">${allFunctions.length}</div>
            </div>
            <div class="summary-card">
                <h3>Total Functions</h3>
                <div class="number">${totalFunctions}</div>
            </div>
            <div class="summary-card">
                <h3>Tests Generated</h3>
                <div class="number">${totalFunctions * 2 + 1}</div>
            </div>
            <div class="summary-card">
                <h3>Status</h3>
                <div class="number">‚úÖ Ready</div>
            </div>
        </div>
        
        <h2>üìã Test Coverage by Module</h2>
        
        ${allFunctions.map(module => `
        <div class="module">
            <div class="module-header">
                üìÑ ${module.file}.ts (${module.functions.length} functions)
            </div>
            <ul class="function-list">
                ${module.functions.map(func => `
                <li class="function-item">
                    <span class="function-name">${func}()</span>
                    <span class="test-status status-generated">Tests Generated</span>
                </li>
                `).join('')}
            </ul>
        </div>
        `).join('')}
        
        <h2>üß™ Generated Test Types</h2>
        <ul>
            <li><strong>Module Loading Tests:</strong> Verify all modules load without errors</li>
            <li><strong>Function Existence Tests:</strong> Check that all exported functions are defined</li>
            <li><strong>Functional Tests:</strong> Basic functionality tests for known function patterns</li>
            <li><strong>Error Handling Tests:</strong> Test error conditions (e.g., division by zero)</li>
        </ul>
        
        <h2>üöÄ How to Run Tests</h2>
        <pre style="background: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto;">
cd 08-frontend-agent
npm test
        </pre>
        
        <div class="footer">
            <strong>Smoke Test Report</strong><br>
            Auto-generated by Smoke-Test Agent<br>
            Part of the MCP and Agent Tutorial
            
            <div class="github-link">
                üìö <a href="https://github.com/elevy99927/mcp-tutorial" target="_blank">
                    View Source Code on GitHub
                </a>
            </div>
        </div>
    </div>
</body>
</html>`;
  }
}