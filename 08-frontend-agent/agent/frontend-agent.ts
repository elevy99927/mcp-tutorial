import { readFileSync, writeFileSync, existsSync, mkdirSync } from 'fs';

/**
 * Frontend Agent
 * Specialized agent for generating and modifying frontend code
 */
export class FrontendAgent {
  
  async generateFrontend(): Promise<void> {
    console.log('  🎨 Frontend Agent: Analyzing frontend requirements...');
    
    try {
      // Ensure outputs/frontend directory exists
      if (!existsSync('outputs')) {
        mkdirSync('outputs');
        console.log('  📁 Created outputs/ directory');
      }
      if (!existsSync('outputs/frontend')) {
        mkdirSync('outputs/frontend');
        console.log('  📁 Created outputs/frontend/ directory');
      }
      
      // Read current frontend.ts to understand existing structure
      const currentCode = this.readCurrentCode();
      console.log('  🔍 Analyzed existing frontend code structure');
      
      // Generate enhanced frontend code
      const frontendCode = this.generateFrontendCode(currentCode);
      
      // Write the enhanced frontend file
      const frontendFile = 'outputs/frontend.ts';
      writeFileSync(frontendFile, frontendCode);
      console.log(`  ✅ Generated ${frontendFile}`);
      
      // Generate HTML demo file
      const htmlDemo = this.generateHtmlDemo();
      const htmlFile = 'outputs/frontend/demo.html';
      writeFileSync(htmlFile, htmlDemo);
      console.log(`  ✅ Generated ${htmlFile}`);
      
    } catch (error: any) {
      console.error('  ❌ Frontend Agent error:', error.message);
    }
  }
  
  /**
   * Read current frontend code to understand existing structure
   */
  private readCurrentCode(): string {
    try {
      return readFileSync('src/frontend.ts', 'utf8');
    } catch (error) {
      console.log('  ⚠️  Could not read src/frontend.ts, creating from scratch');
      return '';
    }
  }
  
  /**
   * Generate enhanced frontend code with login form
   */
  private generateFrontendCode(existingCode: string): string {
    const timestamp = new Date().toISOString();
    
    let content = `// Generated by Frontend Agent 🎨
// Created: ${timestamp}
// Agent: agent/frontend-agent.ts
// Enhanced frontend with login form functionality

// Auto generated sample file for Frontend Agent

import { add, multiply, divide, subtract, power } from './src/math.js';

/** User interface for login form */
export interface LoginForm {
  username: string;
  password: string;
  email?: string;
}

/** User authentication result */
export interface AuthResult {
  success: boolean;
  message: string;
  user?: {
    username: string;
    email?: string;
  };
}

/** greet: pure function */
export function greet(name: string) {
  return \`hello, \${name}\`;
}

/** capitalize: pure function */
export function capitalize(text: string) {
  return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();
}

/** validateEmail: email validation function */
export function validateEmail(email: string): boolean {
  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;
  return emailRegex.test(email);
}

/** validateUsername: username validation function */
export function validateUsername(username: string): boolean {
  return username.length >= 3 && username.length <= 20;
}

/** validatePassword: password validation function */
export function validatePassword(password: string): boolean {
  return password.length >= 6;
}

/** validateLoginForm: comprehensive form validation */
export function validateLoginForm(form: LoginForm): { valid: boolean; errors: string[] } {
  const errors: string[] = [];
  
  if (!validateUsername(form.username)) {
    errors.push('Username must be between 3 and 20 characters');
  }
  
  if (!validatePassword(form.password)) {
    errors.push('Password must be at least 6 characters');
  }
  
  if (form.email && !validateEmail(form.email)) {
    errors.push('Please enter a valid email address');
  }
  
  return {
    valid: errors.length === 0,
    errors
  };
}

/** authenticateUser: mock authentication function */
export function authenticateUser(form: LoginForm): AuthResult {
  const validation = validateLoginForm(form);
  
  if (!validation.valid) {
    return {
      success: false,
      message: \`Validation failed: \${validation.errors.join(', ')}\`
    };
  }
  
  // Mock authentication logic
  if (form.username === 'admin' && form.password === 'password123') {
    return {
      success: true,
      message: 'Login successful!',
      user: {
        username: form.username,
        email: form.email
      }
    };
  }
  
  return {
    success: false,
    message: 'Invalid username or password'
  };
}

/** formatMessage: combines greeting and capitalization */
export function formatMessage(name: string, message: string) {
  const greeting = greet(name);
  const formattedMessage = capitalize(message);
  return \`\${greeting}! \${formattedMessage}\`;
}

/** processData: uses multiple math functions */
export function processData(x: number, y: number) {
  const sum = add(x, y);
  const product = multiply(x, y);
  const difference = subtract(x, y);
  const ratio = divide(product, sum);
  return { sum, product, difference, ratio };
}

/** calculateStats: advanced data processing */
export function calculateStats(numbers: number[]) {
  if (numbers.length === 0) return null;
  
  const sum = numbers.reduce((acc, num) => add(acc, num), 0);
  const average = divide(sum, numbers.length);
  const squares = numbers.map(num => power(num, 2));
  const sumOfSquares = squares.reduce((acc, square) => add(acc, square), 0);
  
  return {
    count: numbers.length,
    sum,
    average,
    sumOfSquares
  };
}

/** validateAndProcess: combines validation with processing */
export function validateAndProcess(data: { name: string; values: number[] }) {
  if (!data.name || data.name.trim().length === 0) {
    throw new Error('Name is required');
  }
  
  if (!data.values || data.values.length === 0) {
    throw new Error('Values array cannot be empty');
  }
  
  const greeting = formatMessage(data.name, 'welcome to data processing');
  const stats = calculateStats(data.values);
  
  return {
    greeting,
    stats,
    processed: true
  };
}

// Demo usage
console.log(greet("Frontend Agent"));
console.log(formatMessage("user", "frontend ready"));

// Demo login form
const demoForm: LoginForm = {
  username: "admin",
  password: "password123",
  email: "admin@example.com"
};

console.log("Demo login:", authenticateUser(demoForm));
`;

    return content;
  }
  
  /**
   * Generate HTML demo file
   */
  private generateHtmlDemo(): string {
    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Frontend Agent Demo</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 600px;
            margin: 50px auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
        }
        .form-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #555;
        }
        input[type="text"], input[type="password"], input[type="email"] {
            width: 100%;
            padding: 10px;
            border: 2px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
            box-sizing: border-box;
        }
        input:focus {
            border-color: #4CAF50;
            outline: none;
        }
        button {
            background-color: #4CAF50;
            color: white;
            padding: 12px 30px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            width: 100%;
        }
        button:hover {
            background-color: #45a049;
        }
        .result {
            margin-top: 20px;
            padding: 15px;
            border-radius: 5px;
            display: none;
        }
        .success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .note {
            background-color: #e2e3e5;
            color: #383d41;
            padding: 15px;
            border-radius: 5px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>🎨 Frontend Agent Demo</h1>
        <p>This is a demo of the login form generated by the Frontend Agent.</p>
        
        <form id="loginForm">
            <div class="form-group">
                <label for="username">Username:</label>
                <input type="text" id="username" name="username" required>
            </div>
            
            <div class="form-group">
                <label for="password">Password:</label>
                <input type="password" id="password" name="password" required>
            </div>
            
            <div class="form-group">
                <label for="email">Email (optional):</label>
                <input type="email" id="email" name="email">
            </div>
            
            <button type="submit">Login</button>
        </form>
        
        <div id="result" class="result"></div>
        
        <div class="note">
            <strong>Demo Credentials:</strong><br>
            Username: admin<br>
            Password: password123<br>
            Email: any valid email (optional)
        </div>
    </div>

    <script>
        // Mock validation functions (simplified for demo)
        function validateEmail(email) {
            const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;
            return emailRegex.test(email);
        }
        
        function validateUsername(username) {
            return username.length >= 3 && username.length <= 20;
        }
        
        function validatePassword(password) {
            return password.length >= 6;
        }
        
        function validateLoginForm(form) {
            const errors = [];
            
            if (!validateUsername(form.username)) {
                errors.push('Username must be between 3 and 20 characters');
            }
            
            if (!validatePassword(form.password)) {
                errors.push('Password must be at least 6 characters');
            }
            
            if (form.email && !validateEmail(form.email)) {
                errors.push('Please enter a valid email address');
            }
            
            return {
                valid: errors.length === 0,
                errors
            };
        }
        
        function authenticateUser(form) {
            const validation = validateLoginForm(form);
            
            if (!validation.valid) {
                return {
                    success: false,
                    message: \`Validation failed: \${validation.errors.join(', ')}\`
                };
            }
            
            // Mock authentication logic
            if (form.username === 'admin' && form.password === 'password123') {
                return {
                    success: true,
                    message: 'Login successful!',
                    user: {
                        username: form.username,
                        email: form.email
                    }
                };
            }
            
            return {
                success: false,
                message: 'Invalid username or password'
            };
        }
        
        // Handle form submission
        document.getElementById('loginForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = {
                username: document.getElementById('username').value,
                password: document.getElementById('password').value,
                email: document.getElementById('email').value
            };
            
            const result = authenticateUser(formData);
            const resultDiv = document.getElementById('result');
            
            resultDiv.style.display = 'block';
            resultDiv.className = 'result ' + (result.success ? 'success' : 'error');
            resultDiv.textContent = result.message;
            
            if (result.success && result.user) {
                resultDiv.innerHTML += \`<br><strong>Welcome, \${result.user.username}!</strong>\`;
                if (result.user.email) {
                    resultDiv.innerHTML += \`<br>Email: \${result.user.email}\`;
                }
            }
        });
    </script>
</body>
</html>`;
  }
}